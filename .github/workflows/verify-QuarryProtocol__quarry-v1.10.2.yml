name: Verify QuarryProtocol/quarry v1.10.2
on:
  push:
    paths:
      - .github/workflows/verify-QuarryProtocol__quarry-v1.10.2.yml
env:
  ANCHOR_CLI_VERSION: 0_18_2
  PROGRAM_GITHUB_REPO: QuarryProtocol/quarry
  PROGRAM_GIT_TAG: v1.10.2
  PROGRAM_SLUG: QuarryProtocol__quarry-v1.10.2
  PROGRAM_TARBALL_URL: https://github.com/QuarryProtocol/quarry/archive/refs/tags/v1.10.2.tar.gz
  MAINNET_PROGRAM_ADDRESSES_JSON: '{"quarry_merge_mine":"QMMD16kjauP5knBwxNUJRZ1Z5o3deBuFrqVjBVmmqto","quarry_mine":"QMNeHCGYnLVDn1icRAfQZpjPLBNkfGbSKRB83G5d8KB","quarry_mint_wrapper":"QMWoBmAyJLAsA1Lh9ugMTw2gciTihncciphzdNzdZYV","quarry_operator":"QoP6NfrQbaGnccXQrMLUkog2tQZ4C1RFgJcwDnT8Kmz","quarry_redeemer":"QRDxhMw1P2NEfiw5mYXG79bwfgHTdasY2xNP76XSea9","quarry_registry":"QREGBnEj9Sa5uR91AV8u3FxThgP5ZCvdZUW2bHAkfNc"}'
  PROGRAM_NAMES: quarry_merge_mine quarry_mine quarry_mint_wrapper quarry_operator
    quarry_redeemer quarry_registry
jobs:
  release-binaries:
    runs-on: ubuntu-latest
    name: Release verifiable binaries
    steps:
      - uses: actions/checkout@v3
      - uses: cachix/install-nix-action@v16
      - name: Setup Cachix
        uses: cachix/cachix-action@v10
        with:
          name: saber
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
      - name: Download sources from GitHub
        run: |
          curl -L ${{ env.PROGRAM_TARBALL_URL }} > release.tar.gz
      - name: Extract sources
        run: echo $(tar xzvf release.tar.gz | head -1 | cut -f1 -d"/") > dirname
      - name: Extract addresses
        run: |
          cd $(cat dirname)
          echo '${{ env.MAINNET_PROGRAM_ADDRESSES_JSON }}' > addresses.json
      - name: Login to Anchor
        run: nix shell ./#anchor-${{ env.ANCHOR_CLI_VERSION }} --command anchor login
          ${{ secrets.ANCHOR_AUTH_TOKEN }}
      - name: Perform verifiable build
        run: >
          cd $(cat dirname)

          cat addresses.json | jq .

          for PROGRAM in ${{ env.PROGRAM_NAMES }}; do
            nix shell ../#anchor-${{ env.ANCHOR_CLI_VERSION }} --command anchor build --verifiable --program-name "$PROGRAM"
          done
      - name: Publish build to Anchor Registry
        run: >
          cd $(cat dirname)

          for PROGRAM in ${{ env.PROGRAM_NAMES }}; do
            yes 'yes' | nix shell ../#anchor-${{ env.ANCHOR_CLI_VERSION }} --command anchor publish "$PROGRAM" --provider.cluster mainnet
          done
      - name: Record program artifacts
        run: >
          mkdir artifacts

          mv $(cat dirname)/target/verifiable/ artifacts/verifiable/

          mv $(cat dirname)/target/idl/ artifacts/idl/

          mv $(cat dirname)/addresses.json artifacts/addresses.json


          # Create versions of each binary without trailing NULL bytes

          # This makes it easier to verify checksums on-chain

          mkdir -p artifacts/verifiable-trimmed/

          for PROGRAM in $(ls artifacts/verifiable/*.so); do
            sed '$ s/\\x00*$//' $PROGRAM > artifacts/verifiable-trimmed/$(basename $PROGRAM)
          done



          sha256sum release.tar.gz >> artifacts/checksums.txt

          sha256sum artifacts/verifiable/* >> artifacts/checksums.txt

          sha256sum artifacts/verifiable-trimmed/* >> artifacts/checksums.txt


          du -b release.tar.gz >> artifacts/sizes.txt

          du -b artifacts/verifiable/*.so >> artifacts/sizes.txt

          du -b artifacts/verifiable-trimmed/*.so >> artifacts/sizes.txt


          # IDLs might not be generated

          if compgen -G "artifacts/idl/*" > /dev/null; then
            sha256sum artifacts/idl/* >> artifacts/checksums.txt
          fi


          cat artifacts/sizes.txt | jq -R '. | split("\\t") | [{key:.[1],value:.[0]}] | from_entries' | jq -s add > artifacts/sizes.json

          cat artifacts/checksums.txt | jq -R '. | split("  ") | [{key:.[0],value:.[1]}] | from_entries' | jq -s add > artifacts/checksums.json


          echo "anchorVersion: \\"$(nix shell .#anchor-${{ env.ANCHOR_CLI_VERSION }} --command anchor --version)\\"" >> artifacts/build-info.yml

          echo "createdAt: \\"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\\"" >> artifacts/build-info.yml

          echo 'repo: "${{ env.PROGRAM_GITHUB_REPO }}"' >> artifacts/build-info.yml

          echo 'tag: "${{ env.PROGRAM_GIT_TAG }}"' >> artifacts/build-info.yml

          echo 'slug: "${{ env.PROGRAM_SLUG }}"' >> artifacts/build-info.yml

          nix shell .#devShell --command bash -c 'cat artifacts/build-info.yml | yj' > artifacts/build-info.json


          echo '---' >> artifacts/README.md

          cat artifacts/build-info.yml >> artifacts/README.md

          echo '---' >> artifacts/README.md

          echo '# ${{ env.PROGRAM_GITHUB_REPO }} ${{ env.PROGRAM_GIT_TAG }}' >> artifacts/README.md

          echo '## Checksums' >> artifacts/README.md

          echo '```' >> artifacts/README.md

          cat artifacts/checksums.txt >> artifacts/README.md

          echo '```' >> artifacts/README.md
      - name: Upload
        uses: peaceiris/actions-gh-pages@v3
        with:
          deploy_key: ${{ secrets.DIST_DEPLOY_KEY }}
          external_repository: DeployDAO/verified-program-artifacts
          publish_branch: verify-${{ env.PROGRAM_SLUG }}
          publish_dir: ./artifacts/
